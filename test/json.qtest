#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

# do not use "$" for vars, etc, assume local var scope
%new-style
# do not allow access to "noop" function variants
%strict-args
# enable all warnings
%enable-all-warnings
# child programs do not inherit parent's restrictions
%no-child-restrictions
# require types to be declared
%require-types
# test deprecated functions as well
%disable-warning deprecated

# make sure we have the right version of qore
%requires qore >= 0.8.13

# make sure we have the json module
%requires json

%requires QUnit

%exec-class JsonTest

class JsonTest inherits QUnit::Test {
    public {}

    private {
        const TestHash = {
            "key1": 1,
            "key2": "string-\"test-quotes\"",
            "key3": 1.0391,
            "list": (1, 2, 3, ("four": 4), 5.1, True, ("key1": "one", "key2": 2.1)),
            "hash": ("test1": 123, "test2": 456),
            "bool": True,
            "time": now().format("YYYY-MM-DD HH:mm:SS"),
            "key": "this & that",
            "escapes": "lorem ipsum\ndolor\tsir amet",
            "\"key\"": 1,
            "null": NOTHING,
            "arr": (NOTHING,),
        };

        const TestDate = 2018-03-10T05:17:18Z;
    }

    constructor() : Test("JsonTest", "1.0", \ARGV) {
        addTestCase("float rounding test", \floatRoundingTest());
        addTestCase("issue 3135", \issue3135());
        addTestCase("JsonTestCase", \jsonTestCase());
        addTestCase("JSON-RPC TestCase", \jsonRpcTestCase());
        addTestCase("JSON-RPC 1.1 TestCase", \jsonRpc11TestCase());
        addTestCase("JsonDeprecatedTestCase", \jsonDeprecatedTestCase());
        addTestCase("parse_json UTF-8/Unicode BOM skipping test", \parseJsonBom());
        addTestCase("issue 2655", \issue2655());
        set_return_value(main());
    }

    floatRoundingTest() {
        assertEq("1.1", trim(make_json(1.1)));
        assertEq("1.2", trim(make_json(1.2)));
        assertEq("1.3", trim(make_json(1.3)));
        assertEq("250.1912", trim(make_json(250.1912)));
    }

    issue3135() {
        assertEq("\"PT1S250000u\"", make_json(1s + 250ms));
        assertEq("\"P2M3DT10H14u\"", make_json(P2M3DT10H14u));
        assertEq("\"P10Y4M200DT99H140S\"", make_json(P10Y4M200DT99H140S));

        assertEq(PT1S250000u, date(parse_json("\"PT1S250000u\"")));
        assertEq(P2M3DT10H14u, date(parse_json("\"P2M3DT10H14u\"")));
        assertEq(P10Y4M200DT99H140S, date(parse_json("\"P10Y4M200DT99H140S\"")));
    }

    jsonTestCase() {
        assertEqSoft(TestHash, parse_json(make_json(TestHash)));
        assertEqSoft(TestHash, parse_json(make_json(TestHash, JGF_ADD_FORMATTING)));
        # issue #3707
        assertEq(30.0, parse_json("3E1"));
        assertEq(30.0, parse_json("3e1"));
        assertThrows("JSON-PARSE-ERROR", \parse_json(), "3e1e2");
        assertThrows("JSON-PARSE-ERROR", \parse_json(), "3e1E2");
        assertThrows("JSON-PARSE-ERROR", \parse_json(), "3E1e2");
        assertThrows("JSON-PARSE-ERROR", \parse_json(), "3E1E2");
    }

    jsonRpcTestCase() {
        int id = 512;
        string method = "methodname";

        hash jc = {
            "id": id,
            "method": method,
            "params": TestHash,
        };

        # JSON-RPC 1.0 messages
        assertEq(jc, parse_json(make_jsonrpc_request(method, NOTHING, id, TestHash)));
        assertEq(jc, parse_json(make_jsonrpc_request(method, "1.0", id, TestHash)));
        assertEq(jc, parse_json(make_jsonrpc_request(method, NOTHING, id, TestHash, JGF_ADD_FORMATTING)));
        assertEq(jc, parse_json(make_jsonrpc_request(method, "1.0", id, TestHash, JGF_ADD_FORMATTING)));

        hash jr = jc - ("method", "params") + ("result": TestHash);
        assertEq(jr, parse_json(make_jsonrpc_response(NOTHING, id, TestHash)));
        assertEq(jr, parse_json(make_jsonrpc_response("1.0", id, TestHash)));
        assertEq(jr, parse_json(make_jsonrpc_response(NOTHING, id, TestHash, JGF_ADD_FORMATTING)));
        assertEq(jr, parse_json(make_jsonrpc_response("1.0", id, TestHash, JGF_ADD_FORMATTING)));

        # create error hash by modifying the result hash: delete "result" key and add "error" key
        hash je = jr - "result" + ("error": TestHash);
        assertEq(je, parse_json(make_jsonrpc_error(NOTHING, id, TestHash)));
        assertEq(je, parse_json(make_jsonrpc_error("1.0", id, TestHash)));
        assertEq(je, parse_json(make_jsonrpc_error(NOTHING, id, TestHash, JGF_ADD_FORMATTING)));
        assertEq(je, parse_json(make_jsonrpc_error("1.0", id, TestHash, JGF_ADD_FORMATTING)));

        jc."jsonrpc" = "2.0";

        # JSON-RPC 2.0 messages
        assertEq(jc, parse_json(make_jsonrpc_request(method, "2.0", id, TestHash)));
        assertEq(jc, parse_json(make_jsonrpc_request(method, "2.0", id, TestHash, JGF_ADD_FORMATTING)));

        jr = jc - ("method", "params") + ("result": TestHash);
        assertEq(jr, parse_json(make_jsonrpc_response("2.0", id, TestHash)));
        assertEq(jr, parse_json(make_jsonrpc_response("2.0", id, TestHash, JGF_ADD_FORMATTING)));

        # create error hash by modifying the result hash: delete "result" key and add "error" key
        je = jr - "result" + ("error": TestHash);
        assertEq(je, parse_json(make_jsonrpc_error("2.0", id, TestHash)));
        assertEq(je, parse_json(make_jsonrpc_error("2.0", id, TestHash, JGF_ADD_FORMATTING)));
    }

    jsonRpc11TestCase() {
        string ver = "1.1";
        int id = 512;
        string method = "methodname";

        hash jc = {
            "version": ver,
            "id": id,
            "method": method,
            "params": TestHash,
        };

        # non-standard, non-published JSON-RPC 1.1 messages
        assertEq(jc, parse_json(make_jsonrpc_request(method, ver, id, TestHash)));
        assertEq(jc, parse_json(make_jsonrpc_request(method, ver, id, TestHash, JGF_ADD_FORMATTING)));

        # create result hash by modifying the call hash above: delete "method" and "params" keys and add "result" key
        hash jr = jc - "method" - "params" + ("result": TestHash);
        assertEq(jr, parse_json(make_jsonrpc_response(ver, id, TestHash)));
        assertEq(jr, parse_json(make_jsonrpc_response(ver, id, TestHash, JGF_ADD_FORMATTING)));

        # create error hash by modifying the result hash: delete "result" key and add "error" key
        hash je = jr - "result" + ("error": TestHash);
        assertEq(je, parse_json(make_jsonrpc_error(ver, id, TestHash)));
        assertEq(je, parse_json(make_jsonrpc_error(ver, id, TestHash, JGF_ADD_FORMATTING)));
    }

    jsonDeprecatedTestCase() {
        string jstr = makeJSONString(TestHash);
        assertEq(True, TestHash == parseJSON(jstr));

        string ver = "1.1";
        int id = 512;
        string method = "methodname";
        string mess = "error description test";

        hash jc = (
            "version": ver,
            "id": id,
            "method": method,
            "params": TestHash,
            );

        assertEq(jc, parseJSON(makeJSONRPCRequestString(method, ver, id, TestHash)));
        assertEq(jc, parseJSON(makeFormattedJSONRPCRequestString(method, ver, id, TestHash)));

        # create result hash by modifying the call hash above: delete "method" and "params" keys and add "result" key
        hash jr = jc - "method" - "params" + ("result": TestHash);
        assertEq(jr, parseJSON(makeJSONRPCResponseString(ver, id, TestHash)));
        assertEq(jr, parseJSON(makeFormattedJSONRPCResponseString(ver, id, TestHash)));

        # create error hash by modifying the result hash: delete "result" key and add "error" key
        hash je = jr - "result" + ("error": TestHash);
        assertEq(je, parseJSON(makeJSONRPCErrorString(ver, id, TestHash)));
        assertEq(je, parseJSON(makeFormattedJSONRPCErrorString(ver, id, TestHash)));

        # create JSON-RPC 1.1 error string
        je = je + ("error": ("name": "JSONRPCError", "code": id, "message": mess, "error": TestHash));
        assertEq(je, parse_json(make_jsonrpc11_error(id, mess, id, TestHash)));
        assertEq(je, parse_json(make_jsonrpc11_error(id, mess, id, TestHash, JGF_ADD_FORMATTING)));
        assertEq(je, parseJSON(makeJSONRPC11ErrorString(id, mess, id, TestHash)));
        assertEq(je, parseJSON(makeFormattedJSONRPC11ErrorString(id, mess, id, TestHash)));
    }

    parseJsonBom() {
        string data = make_json(TestHash);
        binary b = binary(data);
        string dataWithUtf8BOM = (<efbbbf> + b).toString("UTF-8");
        string dataWithFEFFBOM = (<feff> + b).toString("UTF-8");
        string dataWithFFFEBOM = (<fffe> + b).toString("UTF-8");

        assertEqSoft(TestHash, parse_json(dataWithUtf8BOM));
        assertEqSoft(TestHash, parse_json(dataWithFEFFBOM));
        assertEqSoft(TestHash, parse_json(dataWithFFFEBOM));
        assertEqSoft(TestHash, parseJSON(dataWithUtf8BOM));
        assertEqSoft(TestHash, parseJSON(dataWithFEFFBOM));
        assertEqSoft(TestHash, parseJSON(dataWithFFFEBOM));
    }

    issue2655() {
        # the json module serializes all dates to the current time zone
        TimeZone tz = TimeZone::get();
        # get a string for the test date in this time zone
        string datestr = tz.date(TestDate).format("YYYY-MM-DDTHH:mm:SS.usZ");
        string json = make_json(TestDate);

        # transform "Z" at the end into "+00:00" because that's the format that Qore generates
        if (json[json.length()-2] == "Z") {
            json = json.substr(0, json.length()-2) + "+00:00\"";
        }

        assertEq("\"" + datestr + "\"", json);
    }
}
